"""
QuantumLeap Trading Backend - Modernized Main Application
Version: 2.0.0

Modular architecture with separate authentication, portfolio, and trading modules.
"""
import logging
import os
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from starlette.middleware.sessions import SessionMiddleware

# Import configuration
from app.core.config import settings

# Import database initialization
from app.database.service import init_database

# Import routers
from app.auth.router import router as auth_router
from app.portfolio.router import router as portfolio_router
from app.ai_engine.router import router as ai_engine_router

# Configure logging
logging.basicConfig(level=getattr(logging, settings.log_level))
logger = logging.getLogger(__name__)

# Initialize FastAPI app
app = FastAPI(
    title=settings.app_name,
    version=settings.app_version,
    description="Modernized API with modular architecture for broker authentication, portfolio management, and trading operations."
)

app.add_middleware(
    SessionMiddleware,
    secret_key=os.environ.get("SESSION_SECRET", "a-secure-secret-key"),
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Health check endpoints
@app.get("/health")
async def health_check():
    """Simple health check endpoint for Railway deployment"""
    return {"status": "ok", "app": settings.app_name, "version": settings.app_version}

@app.get("/")
async def root():
    """Root endpoint with basic app info"""
    return {
        "message": "QuantumLeap Trading Backend API",
        "version": settings.app_version,
        "docs": "/docs",
        "health": "/health"
    }

# Initialize database on startup
@app.on_event("startup")
async def on_startup():
    """Initialize database and startup tasks"""
    logger.info("Starting QuantumLeap Trading Backend")
    try:
        init_database()
        logger.info("Database initialized.")
    except Exception as e:
        logger.error(f"Database initialization failed: {e}")
        # Don't crash the app, let health checks still work

# Include routers
app.include_router(auth_router)
app.include_router(portfolio_router)
app.include_router(ai_engine_router)
